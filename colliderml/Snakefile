rule all:
    input:
        "data/reco/mu_pt0.5-100/performance_seeding.root",

        "plots/mu_seeding_efficiency_vs_eta.pdf",
        "plots/mu_finding_efficiency_vs_eta.pdf",
        "plots/mu_finding_efficiency_vs_pt.pdf",
        "plots/mu_fitting_resolution_d0_vs_eta.pdf",
        "plots/mu_fitting_pullwidth_vs_eta.pdf",

        "plots/e_finding_efficiency_vs_eta.pdf",

        expand("plots/ttbar_finding_efficiency_vs_{y}.pdf", y=["eta", "d0", "z0", "pt", "lowpt", "prodr"]),

rule download_data_ttbar200:
    output:
        "data/sim/ttbar200.edm4hep.root",
    shell:
        """
        mkdir -p data/sim
        curl https://portal.nersc.gov/cfs/m4958/ColliderML/full_pileup/ttbar/v1/runs/0/edm4hep.root -o data/sim/ttbar200.edm4hep.root
        """

rule reconstruction:
    input:
        data = "data/sim/{label}.edm4hep.root",
        script = "scripts/reco.py",
    output:
        "data/reco/{label}/performance_seeding.root",
        "data/reco/{label}/performance_finding_ambi.root",
        "data/reco/{label}/performance_fitting_ambi.root",
    threads: 8
    params:
        events = 100000,
    shell:
        "scripts/activate_and_run.sh python {input.script} --input-file {input.data} --output-dir data/reco/{wildcards.label} --events {params.events} --threads {threads}"

rule plot_mu_seeding_efficiency_vs_eta:
    input:
        data = ["data/reco/mu_pt1/performance_seeding.root", "data/reco/mu_pt10/performance_seeding.root", "data/reco/mu_pt100/performance_seeding.root"],
        script = "scripts/plot_mu_seeding_efficiency_vs_eta.py",
    output:
        "plots/mu_seeding_efficiency_vs_eta.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} --output {output}"

rule plot_mu_finding_efficiency_vs_eta:
    input:
        data = ["data/reco/mu_pt1/performance_finding_ambi.root", "data/reco/mu_pt10/performance_finding_ambi.root", "data/reco/mu_pt100/performance_finding_ambi.root"],
        script = "scripts/plot_mu_finding_efficiency_vs_eta.py",
    output:
        "plots/mu_finding_efficiency_vs_eta.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} --output {output}"

rule plot_mu_finding_efficiency_vs_pt:
    input:
        data = "data/reco/mu_pt0.5-100/performance_finding_ambi.root",
        script = "scripts/plot_mu_finding_efficiency_vs_pt.py",
    output:
        "plots/mu_finding_efficiency_vs_pt.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} --output {output}"

rule plot_mu_fitting_resolution_d0_vs_eta:
    input:
        data = ["data/reco/mu_pt1/performance_fitting_ambi.root", "data/reco/mu_pt10/performance_fitting_ambi.root", "data/reco/mu_pt100/performance_fitting_ambi.root"],
        script = "scripts/plot_mu_fitting_resolution_d0_vs_eta.py",
    output:
        "plots/mu_fitting_resolution_d0_vs_eta.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} --output {output}"

rule plot_mu_fitting_pullwidth_vs_eta:
    input:
        data = ["data/reco/mu_pt1/performance_fitting_ambi.root", "data/reco/mu_pt10/performance_fitting_ambi.root", "data/reco/mu_pt100/performance_fitting_ambi.root"],
        script = "scripts/plot_mu_fitting_pullwidth_vs_eta.py",
    output:
        "plots/mu_fitting_pullwidth_vs_eta.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} --output {output}"

rule plot_e_finding_efficiency_vs_eta:
    input:
        data = ["data/reco/e_pt1/performance_finding_ambi.root", "data/reco/e_pt10/performance_finding_ambi.root", "data/reco/mu_pt10/performance_finding_ambi.root"],
        script = "scripts/plot_e_finding_efficiency_vs_eta.py",
    output:
        "plots/e_finding_efficiency_vs_eta.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} --output {output}"

rule plot_ttbar_finding_efficiency:
    input:
        data = ["data/reco/ttbar200/performance_finding_ambi.root"],
        script = "scripts/plot_ttbar_finding_efficiency.py",
    output:
        "plots/ttbar_finding_efficiency_vs_{y}.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} {wildcards.y} --output {output}"

rule plot_ttbar_finding_efficiency_lowpt:
    input:
        data = ["data/reco/ttbar200/performance_finding_ambi_lowpt.root"],
        script = "scripts/plot_ttbar_finding_efficiency.py",
    output:
        "plots/ttbar_finding_efficiency_vs_lowpt.pdf",
    shell:
        "scripts/activate_and_run.sh python {input.script} {input.data} lowpt --output {output}"
